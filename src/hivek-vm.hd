class HivekMem:
    mem : u8*

    def initialize : void
        @n : int

        mem = new u8[n]

    def read_bin : void
        @path : char*

        var c : int
        f = fopen(path, "rb")

        i = 0
        while true:
            c = fgetc(f)

            if c == EOF:
                break

            mem[i] = c
            i = i + 1

    def dump : void
        @n : int

        for i = 0; i < n; ++i:
            printf("%02x\n", mem[i])

    def read32 : u64
        @addr : u64

        var v : u64 = 0
        var k : u64

        v = (v << 8) | mem[addr + 0]
        v = (v << 8) | mem[addr + 1]
        v = (v << 8) | mem[addr + 2]
        v = (v << 8) | mem[addr + 3]

        return v

    def write32 : void
        @addr  : u64
        @value : u32

        # v not declared error
        # mem[addr + 0] = (v >> 24) & 0x0ff
        mem[addr + 0] = (value >> 24) & 0x0ff
        mem[addr + 1] = (value >> 16) & 0x0ff
        mem[addr + 2] = (value >>  8) & 0x0ff
        mem[addr + 3] = (value >>  0) & 0x0ff

class HivekVM:
    ip   : u64
    regs : u64*
    mem  : HivekMem
    run_flag : bool

    def initialize : void
        ip = 0
        mem.initialize(8 * 1024 * 1024) 
        regs = new u64[32]
        run_flag = true

    def print_byte : void
        @byte : u8

        # C stuff
        printf("%x\n", byte)

    def run : void
        while run_flag:
            execute_instruction()
            printf("\nip = %lx\r", ip)

    def execute_instruction : void
        inst = mem.read32(ip)
        run_flag = false

        if is_16bit_instruction(inst):
            exec_16bit(inst)
        elif is_24bit_instruction(inst):
            exec_24bit(inst)
        elif is_32bit_instruction(inst):
            exec_32bit(inst)
            run_flag = true

    def is_16bit_instruction : bool
        @inst : u32

        return (inst >> 30) & 0x3 == 0
            || (inst >> 30) & 0x3 == 1
            || (inst >> 30) & 0x3 == 2

    def is_24bit_instruction : bool
        @inst : u32

        return (inst >> 24) == 6

    def is_32bit_instruction : bool
        @inst : u32

        return (inst >> 29) & 0x7 == 7

    def exec_16bit : void
        @inst : u32

        ip += 2

    def exec_24bit : void
        @inst : u32

        ip += 3

    def exec_32bit : void
        @inst : u32

        OPCODE_32_SH = 23
        OPCODE_32_MASK = 0x3F
        FUNCT_32_SH = 0
        FUNCT_32_MASK = 0x7f
        RA_32_MASK = 0x1f
        RB_32_MASK = 0x1f
        RC_32_MASK = 0x1f
        RA_32_SH = 18
        RB_32_SH = 13
        RC_32_SH = 8
        FUNCT_32_ADD_64 = 0
        FUNCT_32_SUB_64 = 1
        IMMD13_32_SH = 0
        IMMD13_32_MASK = 0x1FFF

        OPCODE_32_ADDI_64 = 1

        opcode = (inst >> OPCODE_32_SH) & OPCODE_32_MASK
        funct  = (inst >> FUNCT_32_SH) & FUNCT_32_MASK
        ra     = (inst >> RA_32_SH) & RA_32_MASK
        rb     = (inst >> RB_32_SH) & RB_32_MASK
        rc     = (inst >> RC_32_SH) & RC_32_MASK
        immd   = (inst >> IMMD13_32_SH) & IMMD13_32_MASK

        printf("op = %i\n", opcode)
        printf("funct = %i\n", funct)
        printf("ra = %i\n", ra)
        printf("rb = %i\n", rb)
        printf("rc = %i\n", rc)
        printf("immd = %i\n", immd)

        if opcode == 0:
            if funct == FUNCT_32_ADD_64:
                regs[rc] = regs[ra] + regs[rb]
                ip += 4
            elif funct == FUNCT_32_SUB_64:
                regs[rc] = regs[ra] - regs[rb]
                ip += 4
        elif opcode == OPCODE_32_ADDI_64:
            regs[rb] = regs[ra] + immd
            ip += 4
        else:
            printf("none\n")

    def read_bin : void
        @path : char*

        mem.read_bin(path)

    def dump : void
        for i = 0; i < 32; ++i:
            # C stuff
            printf("regs[%i] = 0x%016lx\n", i, regs[i])

        mem.dump(10)

def main : int
    v = HivekVM()
    v.initialize()
    v.read_bin('init.bin')
    v.run()
    v.dump()
